/* @flow */
import invariant from "invariant"
import Mailbox from "./mailbox"

export const BLOCKED_ERROR: Error = new Error(
  "attempt to receive while blocking"
)

export type MsgT = any
export type ContinuationFunctionT = () => ?any
export type ActionFunctionT = (msg: MsgT) => ?any // maybe return a thunk
type Tampf = (arg?: any) => ?Tampf

type MatchObjectT = { match: MsgT, action: ActionFunctionT }
type MatchObectsT = Array<MatchObjectT>

// const ActionResult = {
//  RAN_OK: "RAN_OK",
//  CRASHED: "CRASHED",
//  BLOCKED: "BLOCKED"
// }
// type ActionResultT = $Keys<typeof ActionResult>

// globally registered actors
const _actorsRegister = {}

type ContextT = {
  ms: MatchObectsT,
  continuation: ?ContinuationFunctionT
}
var refId = 0
export const TIME_OUT: string = "1234567_TIMEOUT"
export const DOWN: string = "1234567_DOWN"
export const EXIT: string = "1234567_EXIT"

type SignalT = { name: "1234567_EXIT", pid: *, reason: string }

// const IMMEDIATE_TIMEOUT = -1

export type MonitorRef = {
  id: number,
  theMonitoringActor: *,
  theMonitoredActor: *
}

function bodge(f, c): void {
  while (f.continuation && f !== f.continuation) {
    f = f.continuation
  }
  f.continuation = c
}

function preparedActionFromMatch(
  match: MatchObjectT,
  msg: MsgT
): ActionFunctionT {
  match.action.args = [msg]
  return match.action
}

function FAKE_INIT(actor) {}

export default class Actor2 {
  _halfinitialized: boolean
  _inbox: Mailbox
  stashedData: ?ContextT
  _links: Array<Actor2>
  _monitors: Array<MonitorRef>
  timer: ?TimeoutID
  inTrampoline: boolean
  _trapExit: boolean
  DEAD: boolean

  resetState(): void {
    this.stashedData = null
    this.timer = null
    this._inbox = new Mailbox()
    this._monitors = []
    this._links = []
    this.inTrampoline = false
    this._trapExit = false
  }

  constructor(
    moduleInit: (actor: Actor2, ...initArgs?: any) => ?any,
    ...initArgs: any
  ) {
    if (moduleInit === FAKE_INIT) {
      this.resetState()
      this._halfinitialized = true
      return
    }
    if (this._halfinitialized) {
      this._halfinitialized = false
    } else {
      this.resetState()
    }
    moduleInit(this, ...initArgs)
    if (!this._blocking() && !this.DEAD) {
      this._killObject("normal")
    }
  }

  trapExit(flag: boolean): void {
    if (this.DEAD) return
    this._trapExit = flag
  }

  spawnLink(
    moduleInit: (actor: Actor2, ...initArgs: any) => void,
    ...initArgs: any
  ) {
    try {
      var pid = new Actor2(FAKE_INIT)
      pid.link(this)
      pid.constructor(moduleInit, ...initArgs)
    } catch (e) {
      invariant(pid, "passed init function threw error")
      pid._killObject(e.message)
    }
    return pid
  }

  link(theMonitoringActor: Actor2): boolean {
    if (theMonitoringActor === this || this.DEAD) return true
    if (!theMonitoringActor || theMonitoringActor.DEAD) {
      if (!this._trapExit) {
        throw new Error("noproc")
      } else {
        const msg: SignalT = {
          name: "1234567_EXIT",
          pid: theMonitoringActor,
          reason: "noproc"
        }
        this.signal(msg)
      }
    }

    if (theMonitoringActor._links.indexOf(this) === -1)
      theMonitoringActor._links.push(this)
    if (this._links.indexOf(theMonitoringActor) === -1)
      this._links.push(theMonitoringActor)
    return true
  }

  // called on the node you want to monitor
  monitorBy(theMonitoringActor: Actor2): MonitorRef {
    var ref = {
      id: ++refId,
      theMonitoringActor: theMonitoringActor,
      theMonitoredActor: this
    }
    if (this.DEAD) {
      theMonitoringActor.send({ name: DOWN, pid: this, reason: "noproc" })
      return ref
    }
    invariant(
      theMonitoringActor && theMonitoringActor !== this,
      "dont link to null or self"
    )
    this._monitors.push(ref)
    return ref
  }

  // maybe add the flush option, would remove one down msg from the caller
  demonitor(ref: MonitorRef): boolean {
    if (this.DEAD) return false
    var i = this._monitors.findIndex(monitorRef => monitorRef.id === ref.id)
    if (i !== -1) {
      this._monitors.splice(i, 1)
      return true
    }
    return false
  }

  tramapoline(f: Tampf): ?any {
    invariant(this.inTrampoline === false, "use one trampoline")
    this.inTrampoline = true
    try {
      while (f && f instanceof Function) {
        var c = f.continuation
        var ff = f.apply(f.context, f.args)
        if (ff && !c) {
          f = ff
        } else if (!ff && c) {
          if (this.stashedData) {
            // move the continuations forward in the trampoline chain
            for (var i = 0; i < this.stashedData.ms.length; i++) {
              bodge(this.stashedData.ms[i].action, c)
            }
            f = ff
          } else {
            f = c
          }
        } else if (ff && c) {
          bodge(ff, c)
          f = ff
        } else {
          f = ff
          if (!this._blocking()) this._killObject("normal")
        }
      }
    } catch (e) {
      this._killObject(e)
    }
    this.inTrampoline = false
    return f
  }

  signal(msg: SignalT): void {
    if (this.DEAD) return
    switch (msg.name) {
      case EXIT:
        // a kill signal can't be trapped, and always kills the actor, but is forwarded to links as killed so it doesn't cascade
        if (this._trapExit && msg.reason !== "kill") {
          this.send(msg)
        } else {
          if (msg.reason !== "normal") this._killObject(msg.reason)
        }
        break
    }
  }

  send(msg: MsgT): ?ActionFunctionT {
    if (this.DEAD) {
      console.debug("Swallowing " + JSON.stringify(msg))
      return
    }
    if (this.inTrampoline) {
      return this._send(msg)
    } else {
      this.tramapoline(() => this._send(msg))
    }
  }

  _send(msg: MsgT): ?ActionFunctionT {
    this._inbox.push(msg)
    if (!this.stashedData) return null
    return this.hasMatchFor(
      this.stashedData,
      () => {
        if (this.timer) clearTimeout(this.timer)
        this.timer = null
        this.stashedData = null
      },
      null
    )
  }

  _killObject(reason: string): void {
    invariant(!this.DEAD, "something has gone wrong if we call this twice")
    Object.keys(_actorsRegister).forEach(
      k => _actorsRegister[k] === this && unregister(k)
    )
    this.DEAD = true

    if (this.timer) clearTimeout(this.timer)

    if (reason === "kill") {
      reason = "killed"
    }
    this._monitors.forEach((monitorRef: MonitorRef) => {
      // maybe need a unique reference
      monitorRef.theMonitoringActor.send({
        name: DOWN,
        pid: this,
        reason: reason
      })
    })
    this._links.forEach(linked => {
      var l = linked._links.indexOf(this)
      invariant(l > -1, "must contain link")
      linked._links.splice(l, 1)
      const msg: SignalT = { name: "1234567_EXIT", pid: this, reason: reason }
      linked.signal(msg)
    })
    this.resetState()
  }

  _blocking(): boolean {
    return !!this.stashedData
  }

  receive(
    matchStatementObjects: MatchObectsT,
    continuation: ?ContinuationFunctionT,
    maybeTimeout?: number
  ): ?ActionFunctionT {
    if (this.DEAD) return
    if (this._blocking()) {
      throw BLOCKED_ERROR
    }
    if (this.inTrampoline) {
      return this._receive(matchStatementObjects, continuation, maybeTimeout)
    } else {
      var tfunc = () =>
        this._receive(matchStatementObjects, continuation, maybeTimeout)
      return this.tramapoline(tfunc)
    }
  }

  _receive(
    matchStatementObjects: MatchObectsT,
    continuation: ?ContinuationFunctionT,
    maybeTimeout?: number
  ): ?ActionFunctionT {
    invariant(this.stashedData === null, "cant stash more than one data")
    if (continuation)
      for (var i = 0; i < matchStatementObjects.length; i++) {
        bodge(matchStatementObjects[i].action, continuation)
      }
    var c = {
      ms: matchStatementObjects,
      continuation: continuation
    }
    var action = this.hasMatchFor(c, null, () => {
      if (maybeTimeout === 0) {
        return this.timeoutActionFromMatches(matchStatementObjects)
      } else {
        // now we are blocked
        this.stashedData = c
      }
      return null
    })

    // if an action was found, return the action to the trampoline, could be the TIME_OUT action
    if (!action && maybeTimeout && maybeTimeout !== 0) {
      action = () => {
        this.timer = setTimeout(() => {
          invariant(this.stashedData !== null, "must be blocked")
          this.timer = null
          this.tramapoline(() => this.send(TIME_OUT))
        }, maybeTimeout)
      }
    }
    return action
  }

  timeoutActionFromMatches(data: MatchObectsT): ActionFunctionT {
    var msgsFromMatchers = data.map(matcher => matcher.match)
    var foundMatch = this._inbox.fakeMatch(TIME_OUT, msgsFromMatchers)
    invariant(
      foundMatch,
      "must have a timeout action if an immediate timeout was specified"
    )
    return preparedActionFromMatch(data[foundMatch[1]], TIME_OUT)
  }

  hasMatchFor(
    data: ContextT,
    onTrue: ?() => void,
    onFalse: ?() => ?ActionFunctionT
  ): ?ActionFunctionT {
    var msgsFromMatchers = data.ms.map(matcher => matcher.match)
    var foundMatch = this._inbox.match(msgsFromMatchers)
    if (!foundMatch) {
      return onFalse && onFalse()
    } else {
      onTrue && onTrue()
      var msg = foundMatch[0]
      var match = data.ms[foundMatch[1]]
      return preparedActionFromMatch(match, msg)
    }
  }
}

// Not sure if we need Pids or just register the actor
export function register(name: string, actor: Actor2): void {
  if (_actorsRegister[name] && _actorsRegister[name] !== actor)
    throw new Error("another actor already registered as " + name)
  _actorsRegister[name] = actor
}

export function unregister(name: string): void {
  if (!_actorsRegister[name]) throw new Error("cant unregister actor " + name)
  delete _actorsRegister[name]
}

export function sendMsg(name: string, msg: MsgT): void {
  _actorsRegister[name].send(msg)
}

export function registered(): Array<string> {
  return Object.keys(_actorsRegister).filter(k => _actorsRegister[k]) // remove null
}

// passing the name around and calling whereis on it is a race bacause of restarting. Add unique refs to messages
// type PidT = number
// function whereis(name): PidT | null {}
